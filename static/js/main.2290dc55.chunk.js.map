{"version":3,"sources":["data.js","App.js","index.js"],"names":["GET_LEETCODE_DATA","gql","_templateObject","_taggedTemplateLiteral","App","loading","error","queryError","data","useQuery","userName","setUserName","useState","repos","setrepos","followers","setfollowers","following","setfollowing","avatar","setavatar","seterror","userInput","setuserInput","bio","setBio","location","setLocation","githubLink","setGithubLink","useEffect","handleSubmit","fetch","concat","then","res","json","message","_ref","avatar_url","public_repos","name","html_url","setData","React","createElement","className","console","log","Form","onSubmit","Group","Input","value","onChange","e","target","handleChange","placeholder","Button","type","Card","Image","src","wrapped","ui","Content","Header","rel","href","Meta","Description","extra","Icon","client","ApolloClient","link","HttpLink","uri","method","headers","fetchOptions","mode","cache","InMemoryCache","ReactDOM","document","getElementById","render","ApolloProvider"],"mappings":"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","file":"static/js/main.2290dc55.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_LEETCODE_DATA = gql`\r\n  query leetcodeData {\r\n    matchedUser(username: \"rishabranjan\") {\r\n      username\r\n      submitStats: submitStatsGlobal {\r\n        acSubmissionNum {\r\n          difficulty\r\n          count\r\n          submissions\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Card, Image, Icon, Form, Button } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_LEETCODE_DATA } from \"./data\";\n\nfunction App() {\n  const { loading, error: queryError, data } = useQuery(GET_LEETCODE_DATA);\n  const [userName, setUserName] = useState(\"\");\n  const [repos, setrepos] = useState(\"\");\n  const [followers, setfollowers] = useState(\"\");\n  const [following, setfollowing] = useState(\"\");\n  const [avatar, setavatar] = useState(\"\");\n  const [error, seterror] = useState(null);\n  const [userInput, setuserInput] = useState(\"rishabranjan\");\n  const [bio, setBio] = useState(null);\n  const [location, setLocation] = useState(\"\");\n  const [githubLink, setGithubLink] = useState(\"\");\n\n  useEffect(() => {\n    handleSubmit();\n  }, []);\n\n  const setData = ({\n    avatar_url,\n    followers,\n    following,\n    public_repos,\n    name,\n    bio,\n    location,\n    html_url,\n  }) => {\n    setUserName(name);\n    setrepos(public_repos);\n    setfollowers(followers);\n    setfollowing(following);\n    setavatar(avatar_url);\n    setBio(bio);\n    setLocation(location);\n    setGithubLink(html_url);\n  };\n\n  const handleChange = (e) => {\n    setuserInput(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    fetch(`https://api.github.com/users/${userInput}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.message) seterror(data.message);\n        else {\n          setData(data);\n          seterror(null);\n        }\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"nav\">\n        <p className=\"heading\">Github Search</p>\n        {!loading ? console.log(data) : console.log(queryError)}\n      </div>\n      <div className=\"form\">\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Input\n              value={userInput}\n              onChange={(e) => handleChange(e)}\n              placeholder=\"Github user\"\n            />\n            <Button type=\"submit\">Search</Button>\n          </Form.Group>\n        </Form>\n      </div>\n      {error ? (\n        <h1 className=\"error\">{error}</h1>\n      ) : (\n        <div className=\"card\">\n          <Card>\n            <Image src={avatar} wrapped ui={false} />\n            <Card.Content>\n              <Card.Header>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={githubLink}>\n                  {userName}\n                </a>\n              </Card.Header>\n              <Card.Meta>\n                <span className=\"date\">{location}</span>\n              </Card.Meta>\n              <Card.Description>{bio}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n              <p>\n                <Icon name=\"user\" />\n                {followers} Followers\n              </p>\n            </Card.Content>\n            <Card.Content extra>\n              <p>\n                <Icon name=\"user\" />\n                {repos} Repos\n              </p>\n            </Card.Content>\n            <Card.Content extra>\n              <p>\n                <Icon name=\"user\" />\n                {following} Followings\n              </p>\n            </Card.Content>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n} from \"@apollo/client\";\nimport App from \"./App\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.css\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"https://leetcode.com/graphql\" }),\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  //   uri: \"https://leetcode.com/graphql\",\n  fetchOptions: {\n    mode: \"no-cors\",\n  },\n  cache: new InMemoryCache(),\n});\n\n// Supported in React 18+\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n"],"sourceRoot":""}