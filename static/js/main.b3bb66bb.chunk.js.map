{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","userName","setUserName","repos","setrepos","followers","setfollowers","following","setfollowing","avatar","setavatar","error","seterror","userInput","setuserInput","bio","setBio","location","setLocation","useEffect","fetch","then","res","json","data","setData","avatar_url","public_repos","name","className","Form","onSubmit","message","Group","Input","onChange","e","target","value","handleChange","placeholder","Button","type","Card","Image","src","wrapped","ui","Content","Header","Meta","Description","extra","Icon","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTA+GeA,MA3Gf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAIqBN,mBAAS,IAJ9B,mBAINO,EAJM,KAIKC,EAJL,OAKeR,mBAAS,IALxB,mBAKNS,EALM,KAKEC,EALF,OAMaV,mBAAS,MANtB,mBAMNW,EANM,KAMCC,EAND,OAOqBZ,mBAAS,IAP9B,mBAONa,EAPM,KAOKC,EAPL,OAQSd,mBAAS,MARlB,mBAQNe,EARM,KAQDC,EARC,OASmBhB,mBAAS,IAT5B,mBASNiB,EATM,KASIC,EATJ,KAWbC,qBAAU,WACRC,MAAM,wCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIC,EAAQD,QACvB,IAEH,IAAMC,EAAU,SAAC,GAQV,IAPLC,EAOI,EAPJA,WACArB,EAMI,EANJA,UACAE,EAKI,EALJA,UACAoB,EAII,EAJJA,aACAC,EAGI,EAHJA,KACAb,EAEI,EAFJA,IACAE,EACI,EADJA,SAEAf,EAAY0B,GACZxB,EAASuB,GACTrB,EAAaD,GACbG,EAAaD,GACbG,EAAUgB,GACVV,EAAOD,GACPG,EAAYD,IAqBd,OACE,yBAAKY,UAAU,OACb,yBAAKA,UAAU,OACb,uBAAGA,UAAU,WAAb,kBAEF,yBAAKA,UAAU,QACb,kBAACC,EAAA,EAAD,CAAMC,SAlBS,WACnBX,MAAM,gCAAD,OAAiCP,IACnCQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACAA,EAAKQ,QAASpB,EAASY,EAAKQ,UAE9BP,EAAQD,GACRZ,EAAS,YAYT,kBAACkB,EAAA,EAAKG,MAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,CACEC,SAAU,SAAAC,GAAC,OA3BF,SAAAA,GAEnBtB,EAAasB,EAAEC,OAAOC,OAyBGC,CAAaH,IAC5BI,YAAY,gBAEd,kBAACC,EAAA,EAAD,CAAQC,KAAK,UAAb,aAIL/B,EACC,4BAAKA,GAEL,yBAAKkB,UAAU,QACb,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAKpC,EAAQqC,SAAO,EAACC,IAAI,IAChC,kBAACJ,EAAA,EAAKK,QAAN,KACE,kBAACL,EAAA,EAAKM,OAAN,KAAchD,GACd,kBAAC0C,EAAA,EAAKO,KAAN,KACE,0BAAMrB,UAAU,QAAQZ,IAE1B,kBAAC0B,EAAA,EAAKQ,YAAN,KAAmBpC,IAErB,kBAAC4B,EAAA,EAAKK,QAAN,CAAcI,OAAK,GACjB,2BACE,kBAACC,EAAA,EAAD,CAAMzB,KAAK,SACVvB,EAFH,eAKF,kBAACsC,EAAA,EAAKK,QAAN,CAAcI,OAAK,GACjB,2BACE,kBAACC,EAAA,EAAD,CAAMzB,KAAK,SACVzB,EAFH,WAKF,kBAACwC,EAAA,EAAKK,QAAN,CAAcI,OAAK,GACjB,2BACE,kBAACC,EAAA,EAAD,CAAMzB,KAAK,SACVrB,EAFH,oBCvFM+C,QACW,cAA7BC,OAAOtC,SAASuC,UAEe,UAA7BD,OAAOtC,SAASuC,UAEhBD,OAAOtC,SAASuC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.b3bb66bb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Card, Image, Icon, Form, Button } from \"semantic-ui-react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [userName, setUserName] = useState(\"\");\n  const [repos, setrepos] = useState(\"\");\n  const [followers, setfollowers] = useState(\"\");\n  const [following, setfollowing] = useState(\"\");\n  const [avatar, setavatar] = useState(\"\");\n  const [error, seterror] = useState(null);\n  const [userInput, setuserInput] = useState(\"\");\n  const [bio, setBio] = useState(null);\n  const [location, setLocation] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/example\")\n      .then(res => res.json())\n      .then(data => setData(data));\n  }, []);\n\n  const setData = ({\n    avatar_url,\n    followers,\n    following,\n    public_repos,\n    name,\n    bio,\n    location\n  }) => {\n    setUserName(name);\n    setrepos(public_repos);\n    setfollowers(followers);\n    setfollowing(following);\n    setavatar(avatar_url);\n    setBio(bio);\n    setLocation(location);\n  };\n\n  const handleChange = e => {\n    // console.log(e.target.value);\n    setuserInput(e.target.value);\n    // console.log(userInput);\n  };\n\n  const handleSubmit = () => {\n    fetch(`https://api.github.com/users/${userInput}`)\n      .then(res => res.json())\n      .then(data => {\n        if (data.message) seterror(data.message);\n        else {\n          setData(data);\n          seterror(null);\n        }\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"nav\">\n        <p className=\"heading\">Github Search</p>\n      </div>\n      <div className=\"form\">\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Input\n              onChange={e => handleChange(e)}\n              placeholder=\"Github user\"\n            />\n            <Button type=\"submit\">Search</Button>\n          </Form.Group>\n        </Form>\n      </div>\n      {error ? (\n        <h1>{error}</h1>\n      ) : (\n        <div className=\"card\">\n          <Card>\n            <Image src={avatar} wrapped ui={false} />\n            <Card.Content>\n              <Card.Header>{userName}</Card.Header>\n              <Card.Meta>\n                <span className=\"date\">{location}</span>\n              </Card.Meta>\n              <Card.Description>{bio}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n              <p>\n                <Icon name=\"user\" />\n                {followers} Followers\n              </p>\n            </Card.Content>\n            <Card.Content extra>\n              <p>\n                <Icon name=\"user\" />\n                {repos} Repos\n              </p>\n            </Card.Content>\n            <Card.Content extra>\n              <p>\n                <Icon name=\"user\" />\n                {following} Followings\n              </p>\n            </Card.Content>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}